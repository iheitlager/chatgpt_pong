# Generated by ChatGPT on 2023-04-25
# 'can you program my pong in python using pygame'
# 'can you call player_paddle the left_paddle and opponent_paddle the right_paddle'
# 'can you add keeping score?'
# 'can you add a proper start with __main__'

import pygame

# Define colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)

# Initialize Pygame
pygame.init()

# Set the dimensions of the screen
screen_width = 700
screen_height = 500
size = (screen_width, screen_height)
screen = pygame.display.set_mode(size)
pygame.display.set_caption("Pong")


# Initialize scores
left_score = 0
right_score = 0
font = pygame.font.Font(None, 74)

# Set initial position and size of the ball
ball_pos = [350, 250]
ball_radius = 10
ball_velocity = [3, 3]

# Create paddles
def draw_paddle(paddle_pos):
    pygame.draw.rect(screen, WHITE, (paddle_pos[0], paddle_pos[1], paddle_width, paddle_height))

# Create ball
def draw_ball(ball_pos):
    pygame.draw.circle(screen, WHITE, ball_pos, ball_radius)

# Display score
def display_score():
    left_score_display = font.render(str(left_score), True, WHITE)
    right_score_display = font.render(str(right_score), True, WHITE)
    screen.blit(left_score_display, (250, 10))
    screen.blit(right_score_display, (420, 10))

# Define game loop
def game_loop():
    global left_score, right_score
    global paddle_width, paddle_height

    # Set initial positions of the paddles
    paddle_width = 15
    paddle_height = 60
    left_paddle_pos = (20, 220)
    right_paddle_pos = (665, 220)


    done = False

    while not done:
        # Event handling
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                done = True

        # Move left paddle
        keys = pygame.key.get_pressed()
        if keys[pygame.K_UP] and left_paddle_pos[1] > 0:
            left_paddle_pos = (left_paddle_pos[0], left_paddle_pos[1] - 5)
        if keys[pygame.K_DOWN] and left_paddle_pos[1] < screen_height - paddle_height:
            left_paddle_pos = (left_paddle_pos[0], left_paddle_pos[1] + 5)

        # Move right paddle
        if right_paddle_pos[1] + paddle_height/2 < ball_pos[1]:
            right_paddle_pos = (right_paddle_pos[0], right_paddle_pos[1] + 3)
        if right_paddle_pos[1] + paddle_height/2 > ball_pos[1]:
            right_paddle_pos = (right_paddle_pos[0], right_paddle_pos[1] - 3)

        # Move ball
        ball_pos[0] += ball_velocity[0]
        ball_pos[1] += ball_velocity[1]

        # Bounce ball off top and bottom walls
        if ball_pos[1] <= ball_radius or ball_pos[1] >= screen_height - ball_radius:
            ball_velocity[1] = -ball_velocity[1]

        # Bounce ball off paddles
        if ball_pos[0] <= left_paddle_pos[0] + paddle_width and left_paddle_pos[1] <= ball_pos[1] <= left_paddle_pos[1] + paddle_height:
            ball_velocity[0] = -ball_velocity[0]
        if ball_pos[0] >= right_paddle_pos[0] - paddle_width and right_paddle_pos[1] <= ball_pos[1] <= ball_pos[1] + paddle_height:
            ball_velocity[0] = -ball_velocity[0]
        # Check if ball goes out of bounds
        if ball_pos[0] < 0:
            right_score += 1
            ball_pos = [350, 250]
            ball_velocity = [3, 3]
        if ball_pos[0] > screen_width:
            left_score += 1
            ball_pos = [350, 250]
            ball_velocity = [-3, -3]

        # Clear the screen
        screen.fill(BLACK)

        # Draw paddles, ball, and scores
        draw_paddle(left_paddle_pos)
        draw_paddle(right_paddle_pos)
        draw_ball(ball_pos)
        display_score()

        # Update the screen
        pygame.display.update()

        # Set the frame rate
        clock = pygame.time.Clock()
        clock.tick(60)

    # Quit the game
    pygame.quit()

#Start the game loop
if __name__ == '__main__':
    game_loop()
