# Generated by ChatGPT on 2023-04-25
# 'can you program my pong in python using pygame'
# 'can you call player_paddle the left_paddle and opponent_paddle the right_paddle'
# 'can you add keeping score?'
# 'can you add a proper start with __main__'
# 'put everything in a proper game class'

import pygame
import random

class PongGame:
    def __init__(self):
        # Define colors
        self.BLACK = (0, 0, 0)
        self.WHITE = (255, 255, 255)

        # Initialize Pygame
        pygame.init()
        self.clock = pygame.time.Clock()

        # Set the dimensions of the screen
        self.screen_width = 700
        self.screen_height = 500
        self.size = (self.screen_width, self.screen_height)
        self.screen = pygame.display.set_mode(self.size)
        pygame.display.set_caption("Pong")

        # Set initial positions of the paddles
        self.paddle_width = 15
        self.paddle_height = 60
        self.left_paddle_pos = (20, 220)
        self.right_paddle_pos = (665, 220)

        # Set initial position and size of the ball
        self.ball_pos = [350, 250]
        self.ball_radius = 10
        self.ball_velocity = [3, 3]

        # Initialize scores
        self.left_score = 0
        self.right_score = 0
        self.font = pygame.font.Font(None, 74)

    # Create paddles
    def draw_paddle(self, paddle_pos):
        pygame.draw.rect(self.screen, self.WHITE, (paddle_pos[0], paddle_pos[1], self.paddle_width, self.paddle_height))

    # Create ball
    def draw_ball(self, ball_pos):
        pygame.draw.circle(self.screen, self.WHITE, ball_pos, self.ball_radius)

    # Display score
    def display_score(self):
        left_score_display = self.font.render(str(self.left_score), True, self.WHITE)
        right_score_display = self.font.render(str(self.right_score), True, self.WHITE)
        self.screen.blit(left_score_display, (250, 10))
        self.screen.blit(right_score_display, (420, 10))

    def move_right_paddle(self):
        # Move right paddle
        # if random.randint(0, 1) == 0:
        #     if self.right_paddle.centery < self.ball.centery:
        #         self.right_paddle.top += 5
        #     elif self.right_paddle.centery > self.ball.centery:
        #         self.right_paddle.top -= 5        
        if random.randint(0, 5) >= 1:
            if self.right_paddle_pos[1] + self.paddle_height/2 < self.ball_pos[1]:
                self.right_paddle_pos = (self.right_paddle_pos[0], self.right_paddle_pos[1] + 3)
            if self.right_paddle_pos[1] + self.paddle_height/2 > self.ball_pos[1]:
                self.right_paddle_pos = (self.right_paddle_pos[0], self.right_paddle_pos[1] - 3)

# Define game loop
    def game_loop(self):
        done = False

        while not done:
            # Event handling
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    done = True

            # Move left paddle
            keys = pygame.key.get_pressed()
            if keys[pygame.K_x]:
                pygame.quit()
            if keys[pygame.K_UP] and self.left_paddle_pos[1] > 0:
                self.left_paddle_pos = (self.left_paddle_pos[0], self.left_paddle_pos[1] - 5)
            if keys[pygame.K_DOWN] and self.left_paddle_pos[1] < self.screen_height - self.paddle_height:
                self.left_paddle_pos = (self.left_paddle_pos[0], self.left_paddle_pos[1] + 5)

            self.move_right_paddle()

            # Move ball
            self.ball_pos[0] += self.ball_velocity[0]
            self.ball_pos[1] += self.ball_velocity[1]

            # Bounce ball off top and bottom walls
            if self.ball_pos[1] <= self.ball_radius or self.ball_pos[1] >= self.screen_height - self.ball_radius:
                self.ball_velocity[1] = -self.ball_velocity[1]

            # Bounce ball off paddles
            if self.ball_pos[0] <= self.left_paddle_pos[0] + self.paddle_width and self.left_paddle_pos[1] - self.ball_radius <= self.ball_pos[1] <= self.left_paddle_pos[1] + self.paddle_height + self.ball_radius:
                self.ball_velocity[0] = -self.ball_velocity[0]
            if self.ball_pos[0] >= self.right_paddle_pos[0] - self.paddle_width and self.right_paddle_pos[1]  - self.ball_radius <= self.ball_pos[1] <= self.right_paddle_pos[1] + self.paddle_height + self.ball_radius:
                self.ball_velocity[0] = -self.ball_velocity[0]

            # Detect scoring
            if self.ball_pos[0] <= 0:
                self.right_score += 1
                self.ball_pos = [350, 250]
            if self.ball_pos[0] >= self.screen_width:
                self.left_score += 1
                self.ball_pos = [350, 250]

            # Draw everything
            self.screen.fill(self.BLACK)
            self.draw_paddle(self.left_paddle_pos)
            self.draw_paddle(self.right_paddle_pos)
            self.draw_ball(self.ball_pos)
            self.display_score()
            pygame.display.flip()

            # Set the game's FPS
            self.clock.tick(60)

if __name__ == '__main__':
    pygame.init()
    game = PongGame()
    game.game_loop()
    pygame.quit()
